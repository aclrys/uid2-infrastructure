apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: thanos-grpc-{{ template "prometheus-operator-addons.fullname" . }}
  labels:
    app: {{ template "prometheus-operator-addons.name" . }}
    chart: {{ template "prometheus-operator-addons.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
# NOTE certmanager lets encrypt annotations are absent here on purpose.
# certmanager is used via Issuer and Certificate entities to generate
# certificate using our own small ca.
  annotations:
    networking.gke.io/managed-certificates: {{ .Values.tlsThanosCertificateName }}
    kubernetes.io/ingress.global-static-ip-name: thanos
{{- if .Values.thanos.mTLSEnabled }}
    # This will make public IP be stored in our "private" dns zone, so name
    # won't be resoved from "outside".
    # Without it it would go to our public zone by default and then private
    # IP would be added to private zone (which would force connecting via
    # dnsfuse VM).
    openx.dns/type: private-zone-only
    # Use nginc ingress controller. We need LB with mTLS support.
    kubernetes.io/ingress.class: k8s-nginx
    # Communication with thanos-query is over GRPC with TLS
    # TODO consider disabling TLS here to simplify query deployment?
    nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
    # Will require client certificate and validate it against ca from
    # auth-tls-secret below
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "2"
    # must contains ca.crt
    nginx.ingress.kubernetes.io/auth-tls-secret: monitoring/thanos-ca-key-pair
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
{{- end }}
spec:
  # Default backend. We need that, because grpc client in thanos does not
  # specify host: when sending requests
  backend:
    serviceName: thanos-query-grpc
    servicePort: {{ .Values.thanos.query.grpcPort }}
  rules:
  - host: thanos-{{ .Values.cluster }}.{{ .Values.tlsDomain }}
    http:
      paths:
      - backend:
          serviceName: thanos-query-grpc
          servicePort: {{ .Values.thanos.query.grpcPort }}
        path: /*
#  tls:
#    # This secret is generated by certmanager (see Certificate
#    # thanos-grpc-certificate object)
#    - secretName: thanos-grpc-certificate
